/* 
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineObject10
    /// </summary>
    [DataContract]
    public partial class InlineObject10 :  IEquatable<InlineObject10>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject10" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject10() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject10" /> class.
        /// </summary>
        /// <param name="className">className (required).</param>
        /// <param name="classValue">classValue (required).</param>
        /// <param name="textUnitId">textUnitId (required).</param>
        public InlineObject10(string className = default(string), string classValue = default(string), int textUnitId = default(int))
        {
            // to ensure "className" is required (not null)
            if (className == null)
            {
                throw new InvalidDataException("className is a required property for InlineObject10 and cannot be null");
            }
            else
            {
                this.ClassName = className;
            }
            
            // to ensure "classValue" is required (not null)
            if (classValue == null)
            {
                throw new InvalidDataException("classValue is a required property for InlineObject10 and cannot be null");
            }
            else
            {
                this.ClassValue = classValue;
            }
            
            // to ensure "textUnitId" is required (not null)
            if (textUnitId == null)
            {
                throw new InvalidDataException("textUnitId is a required property for InlineObject10 and cannot be null");
            }
            else
            {
                this.TextUnitId = textUnitId;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets ClassName
        /// </summary>
        [DataMember(Name="class_name", EmitDefaultValue=true)]
        public string ClassName { get; set; }

        /// <summary>
        /// Gets or Sets ClassValue
        /// </summary>
        [DataMember(Name="class_value", EmitDefaultValue=true)]
        public string ClassValue { get; set; }

        /// <summary>
        /// Gets or Sets TextUnitId
        /// </summary>
        [DataMember(Name="text_unit_id", EmitDefaultValue=true)]
        public int TextUnitId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject10 {\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  ClassValue: ").Append(ClassValue).Append("\n");
            sb.Append("  TextUnitId: ").Append(TextUnitId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject10);
        }

        /// <summary>
        /// Returns true if InlineObject10 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject10 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject10 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClassName == input.ClassName ||
                    (this.ClassName != null &&
                    this.ClassName.Equals(input.ClassName))
                ) && 
                (
                    this.ClassValue == input.ClassValue ||
                    (this.ClassValue != null &&
                    this.ClassValue.Equals(input.ClassValue))
                ) && 
                (
                    this.TextUnitId == input.TextUnitId ||
                    (this.TextUnitId != null &&
                    this.TextUnitId.Equals(input.TextUnitId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClassName != null)
                    hashCode = hashCode * 59 + this.ClassName.GetHashCode();
                if (this.ClassValue != null)
                    hashCode = hashCode * 59 + this.ClassValue.GetHashCode();
                if (this.TextUnitId != null)
                    hashCode = hashCode * 59 + this.TextUnitId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClassName (string) maxLength
            if(this.ClassName != null && this.ClassName.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassName, length must be less than 1024.", new [] { "ClassName" });
            }

            
            // ClassValue (string) maxLength
            if(this.ClassValue != null && this.ClassValue.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassValue, length must be less than 1024.", new [] { "ClassValue" });
            }

            
            yield break;
        }
    }

}
