/* 
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineObject57
    /// </summary>
    [DataContract]
    public partial class InlineObject57 :  IEquatable<InlineObject57>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject57" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="fileSize">fileSize.</param>
        /// <param name="folder">folder.</param>
        /// <param name="status">status.</param>
        /// <param name="statusData">statusData.</param>
        /// <param name="assignee">assignee.</param>
        /// <param name="assignDate">assignDate.</param>
        /// <param name="assigneeData">assigneeData.</param>
        /// <param name="description">description.</param>
        /// <param name="title">title.</param>
        /// <param name="notes">notes.</param>
        public InlineObject57(string name = default(string), string documentType = default(string), int fileSize = default(int), string folder = default(string), int? status = default(int?), ApiV1DocumentDocumentsIdStatusData statusData = default(ApiV1DocumentDocumentsIdStatusData), int? assignee = default(int?), DateTime? assignDate = default(DateTime?), ApiV1DocumentDocumentsIdAssigneeData assigneeData = default(ApiV1DocumentDocumentsIdAssigneeData), string description = default(string), string title = default(string), List<Object> notes = default(List<Object>))
        {
            this.Name = name;
            this.DocumentType = documentType;
            this.Folder = folder;
            this.Status = status;
            this.Assignee = assignee;
            this.AssignDate = assignDate;
            this.Description = description;
            this.Title = title;
            this.Name = name;
            this.DocumentType = documentType;
            this.FileSize = fileSize;
            this.Folder = folder;
            this.Status = status;
            this.StatusData = statusData;
            this.Assignee = assignee;
            this.AssignDate = assignDate;
            this.AssigneeData = assigneeData;
            this.Description = description;
            this.Title = title;
            this.Notes = notes;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name="document_type", EmitDefaultValue=true)]
        public string DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name="file_size", EmitDefaultValue=false)]
        public int FileSize { get; set; }

        /// <summary>
        /// Gets or Sets Folder
        /// </summary>
        [DataMember(Name="folder", EmitDefaultValue=true)]
        public string Folder { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusData
        /// </summary>
        [DataMember(Name="status_data", EmitDefaultValue=false)]
        public ApiV1DocumentDocumentsIdStatusData StatusData { get; set; }

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name="assignee", EmitDefaultValue=true)]
        public int? Assignee { get; set; }

        /// <summary>
        /// Gets or Sets AssignDate
        /// </summary>
        [DataMember(Name="assign_date", EmitDefaultValue=true)]
        public DateTime? AssignDate { get; set; }

        /// <summary>
        /// Gets or Sets AssigneeData
        /// </summary>
        [DataMember(Name="assignee_data", EmitDefaultValue=false)]
        public ApiV1DocumentDocumentsIdAssigneeData AssigneeData { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<Object> Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject57 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  Folder: ").Append(Folder).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusData: ").Append(StatusData).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  AssignDate: ").Append(AssignDate).Append("\n");
            sb.Append("  AssigneeData: ").Append(AssigneeData).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject57);
        }

        /// <summary>
        /// Returns true if InlineObject57 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject57 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject57 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.Folder == input.Folder ||
                    (this.Folder != null &&
                    this.Folder.Equals(input.Folder))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusData == input.StatusData ||
                    (this.StatusData != null &&
                    this.StatusData.Equals(input.StatusData))
                ) && 
                (
                    this.Assignee == input.Assignee ||
                    (this.Assignee != null &&
                    this.Assignee.Equals(input.Assignee))
                ) && 
                (
                    this.AssignDate == input.AssignDate ||
                    (this.AssignDate != null &&
                    this.AssignDate.Equals(input.AssignDate))
                ) && 
                (
                    this.AssigneeData == input.AssigneeData ||
                    (this.AssigneeData != null &&
                    this.AssigneeData.Equals(input.AssigneeData))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    input.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.Folder != null)
                    hashCode = hashCode * 59 + this.Folder.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusData != null)
                    hashCode = hashCode * 59 + this.StatusData.GetHashCode();
                if (this.Assignee != null)
                    hashCode = hashCode * 59 + this.Assignee.GetHashCode();
                if (this.AssignDate != null)
                    hashCode = hashCode * 59 + this.AssignDate.GetHashCode();
                if (this.AssigneeData != null)
                    hashCode = hashCode * 59 + this.AssigneeData.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 1024.", new [] { "Name" });
            }

            

            
            // FileSize (int) maximum
            if(this.FileSize > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileSize, must be a value less than or equal to 2147483647.", new [] { "FileSize" });
            }

            // FileSize (int) minimum
            if(this.FileSize < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileSize, must be a value greater than or equal to 0.", new [] { "FileSize" });
            }

            // Folder (string) maxLength
            if(this.Folder != null && this.Folder.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Folder, length must be less than 1024.", new [] { "Folder" });
            }

            
            // Title (string) maxLength
            if(this.Title != null && this.Title.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 1024.", new [] { "Title" });
            }

            
            yield break;
        }
    }

}
