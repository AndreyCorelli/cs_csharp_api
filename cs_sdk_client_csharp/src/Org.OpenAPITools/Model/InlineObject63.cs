/* 
 * Contraxsuite API
 *
 * Contraxsuite API
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineObject63
    /// </summary>
    [DataContract]
    public partial class InlineObject63 :  IEquatable<InlineObject63>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject63" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject63() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject63" /> class.
        /// </summary>
        /// <param name="username">Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. (required).</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="email">email.</param>
        /// <param name="isSuperuser">Designates that this user has all permissions without explicitly assigning them..</param>
        /// <param name="isStaff">Designates whether the user can log into this admin site..</param>
        /// <param name="isActive">Designates whether this user should be treated as active. Unselect this instead of deleting accounts..</param>
        /// <param name="name">name.</param>
        /// <param name="role">role.</param>
        /// <param name="roleData">roleData.</param>
        /// <param name="organization">organization.</param>
        public InlineObject63(string username = default(string), string lastName = default(string), string firstName = default(string), string email = default(string), bool isSuperuser = default(bool), bool isStaff = default(bool), bool isActive = default(bool), string name = default(string), int? role = default(int?), ApiV1UsersUsersRoleData roleData = default(ApiV1UsersUsersRoleData), string organization = default(string))
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for InlineObject63 and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            
            this.Role = role;
            this.Organization = organization;
            this.LastName = lastName;
            this.FirstName = firstName;
            this.Email = email;
            this.IsSuperuser = isSuperuser;
            this.IsStaff = isStaff;
            this.IsActive = isActive;
            this.Name = name;
            this.Role = role;
            this.RoleData = roleData;
            this.Organization = organization;
        }
        
        /// <summary>
        /// Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
        /// </summary>
        /// <value>Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.</value>
        [DataMember(Name="username", EmitDefaultValue=true)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Designates that this user has all permissions without explicitly assigning them.
        /// </summary>
        /// <value>Designates that this user has all permissions without explicitly assigning them.</value>
        [DataMember(Name="is_superuser", EmitDefaultValue=false)]
        public bool IsSuperuser { get; set; }

        /// <summary>
        /// Designates whether the user can log into this admin site.
        /// </summary>
        /// <value>Designates whether the user can log into this admin site.</value>
        [DataMember(Name="is_staff", EmitDefaultValue=false)]
        public bool IsStaff { get; set; }

        /// <summary>
        /// Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
        /// </summary>
        /// <value>Designates whether this user should be treated as active. Unselect this instead of deleting accounts.</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=true)]
        public int? Role { get; set; }

        /// <summary>
        /// Gets or Sets RoleData
        /// </summary>
        [DataMember(Name="role_data", EmitDefaultValue=false)]
        public ApiV1UsersUsersRoleData RoleData { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name="organization", EmitDefaultValue=true)]
        public string Organization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject63 {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IsSuperuser: ").Append(IsSuperuser).Append("\n");
            sb.Append("  IsStaff: ").Append(IsStaff).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  RoleData: ").Append(RoleData).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject63);
        }

        /// <summary>
        /// Returns true if InlineObject63 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject63 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject63 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.IsSuperuser == input.IsSuperuser ||
                    (this.IsSuperuser != null &&
                    this.IsSuperuser.Equals(input.IsSuperuser))
                ) && 
                (
                    this.IsStaff == input.IsStaff ||
                    (this.IsStaff != null &&
                    this.IsStaff.Equals(input.IsStaff))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.RoleData == input.RoleData ||
                    (this.RoleData != null &&
                    this.RoleData.Equals(input.RoleData))
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.IsSuperuser != null)
                    hashCode = hashCode * 59 + this.IsSuperuser.GetHashCode();
                if (this.IsStaff != null)
                    hashCode = hashCode * 59 + this.IsStaff.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.RoleData != null)
                    hashCode = hashCode * 59 + this.RoleData.GetHashCode();
                if (this.Organization != null)
                    hashCode = hashCode * 59 + this.Organization.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Username (string) maxLength
            if(this.Username != null && this.Username.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be less than 150.", new [] { "Username" });
            }

            
            // Username (string) pattern
            Regex regexUsername = new Regex(@"^[\\w.@+-]+$", RegexOptions.CultureInvariant);
            if (false == regexUsername.Match(this.Username).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, must match a pattern of " + regexUsername, new [] { "Username" });
            }

            // LastName (string) maxLength
            if(this.LastName != null && this.LastName.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 150.", new [] { "LastName" });
            }

            
            // FirstName (string) maxLength
            if(this.FirstName != null && this.FirstName.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 30.", new [] { "FirstName" });
            }

            
            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 254)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 254.", new [] { "Email" });
            }

            
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            
            // Organization (string) maxLength
            if(this.Organization != null && this.Organization.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Organization, length must be less than 100.", new [] { "Organization" });
            }

            
            yield break;
        }
    }

}
